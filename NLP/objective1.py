# -*- coding: utf-8 -*-
"""NLP_pdf_to_mcqs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0T1cWZTO3l4LsQnNdGauR_eqPYypFSh

# Install and Import necessary libraries
"""

pip install PyMuPDF

import openai
import fitz  # PyMuPDF

import nltk
import re

nltk.download('punkt')  # Download NLTK data for tokenization

from nltk.tokenize import word_tokenize

import spacy
nlp = spacy.load("en_core_web_sm")

import random

"""# Functional blocks"""

def remove_special_characters(text):
    # Tokenize the text into words
    words = word_tokenize(text)

    # Define a regular expression pattern to match special characters
    pattern = r'[^a-zA-Z0-9\s]'  # Matches any character that is not a letter, digit, or whitespace

    # Use list comprehension to remove special characters from each word
    cleaned_words = [re.sub(pattern, '', word) for word in words]

    # Join the cleaned words back into a string
    cleaned_text = ' '.join(cleaned_words)

    return cleaned_text

# Function to generate MCQs with multiple correct answers
def generate_mcqs(text, num_mcqs=5, num_correct_answers=2):
    # Process the text with spaCy
    doc = nlp(text)

    mcqs = []

    # Extract sentences from the processed text
    sentences = [sent.text for sent in doc.sents]

    for _ in range(num_mcqs):
        # Randomly select a sentence
        sentence = random.choice(sentences)

        # Split the sentence into words
        words = [token.text for token in nlp(sentence) if token.is_alpha]

        # Randomly select multiple correct answers from the words
        correct_answers = random.sample(words, num_correct_answers)

        # Ensure correct answers are in the choices
        choices = correct_answers + random.sample([word for word in words if word not in correct_answers], 5 - num_correct_answers)

        # Shuffle the choices
        random.shuffle(choices)

        mcq = {
            "question": sentence,
            "choices": choices,
            "correct_answers": correct_answers
        }

        mcqs.append(mcq)

    return mcqs

"""# Read pdf file by ignoring images"""

# Open the PDF file
pdf_file_path = 'chapter-2.pdf'
pdf_document = fitz.open(pdf_file_path)

# Initialize an empty string to store the extracted text
extracted_text = ""

# Iterate through each page and extract text
for page_num in range(len(pdf_document)):
    page = pdf_document.load_page(page_num)
    page_text = page.get_text()
    extracted_text += page_text

# Close the PDF document
pdf_document.close()

# Print or use the extracted text
print(extracted_text)

"""# Remove special characters"""

cleaned_text = remove_special_characters(extracted_text)

print(cleaned_text)

"""# Generate MCQs"""

doc = cleaned_text[:2000]
# Generate MCQs
generated_mcqs = generate_mcqs(doc, num_mcqs=5, num_correct_answers=2)

# Print the generated MCQs
for i, mcq in enumerate(generated_mcqs):
    print(f"MCQ {i + 1}: {mcq['question']}")
    print("Choices:")
    for j, choice in enumerate(mcq['choices']):
        print(f"{chr(65 + j)}. {choice}")

    answ = []
    for ans in mcq['correct_answers']:
      answ.append(chr(65+ mcq['choices'].index(ans)))
    print("Correct Answers:",sorted(answ))
    print()